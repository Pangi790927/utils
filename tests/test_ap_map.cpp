#define AP_EXCEPT_THROW

#include "ap_map.h"
#include "debug.h"

#include <map>

#define TOTAL_MEM   (1024*1024)
#define INIT_MEM    (4096)

static int add_mem_fn(ap_sz_t sz);

static uint8_t mem[TOTAL_MEM];
static ap_ctx_t mc = {
    .region = mem,
    .add_mem_fn = add_mem_fn
};

static ap_sz_t tot_mem = INIT_MEM;
static int add_mem_fn(ap_sz_t sz) {
    tot_mem += sz;
    if (tot_mem > TOTAL_MEM)
        return -1;
    return 0;
}

static std::map<void *, ap_off_t> ptr_off;
static void *ap_alloc(ap_sz_t sz) {
    ap_ctx_t *ctx = &mc;
    auto off = ap_malloc_alloc(ctx, sz);
    if (!off) {
        DBG("alloc failed");
        exit(-1);
    }
    void *p = ap_malloc_ptr(ctx, off);
    ptr_off[p] = off;
    return p;
}

static void ap_free(void *p) {
    auto off = ptr_off[p];
    ap_ctx_t *ctx = &mc;
    ap_malloc_free(ctx, off);
}

int main(int argc, char const *argv[])
{
    DBG_SCOPE();
    ap_ctx_t *ctx = &mc;
    ASSERT_FN(ap_malloc_init(ctx, INIT_MEM));

    using map_t = ap_map_t<int, int>;
    map_t &map = *(map_t *)ap_alloc(sizeof(map_t));
    map.init(ctx);

    map[1] = 101;
    map[2] = 102;
    map[3] = 103;

    DBG("--- sz: %ld", map.size());
    for (auto &[key, val] : map)
        DBG("key: %d, val: %d", key, val);

    map.clear();

    DBG("--- sz: %ld", map.size());
    for (auto &[key, val] : map)
        DBG("key: %d, val: %d", key, val);

    map[1] = 101;
    map[2] = 102;
    map[3] = 104;
    map[5] = 105;
    map[6] = 106;
    map[7] = 107;
    map.erase(6);

    DBG("--- sz: %ld", map.size());
    for (auto &[key, val] : map)
        DBG("key: %d, val: %d", key, val);

    /* TODO: more tests */

    ap_free(&map);

    uint64_t known_bug[] = {
        1630447200, 1630533600, 1630620000, 1630706400, 1630792800,
        1630879200, 1630965600, 1631052000, 1631138400, 1631311200, 1631397600, 1631484000,
        1631570400, 1631656800, 1631743200, 1631916000, 1632002400, 1632088800, 1632175200,
        1632261600, 1632348000, 1632434400, 1632520800, 1632607200, 1632693600, 1632780000,
        1632866400, 1632952800, 1633039200, 1633039200, 1633125600, 1633212000, 1633298400,
        1633384800, 1633471200, 1633557600, 1633644000, 1633730400, 1633816800, 1633903200,
        1633989600, 1634076000, 1634162400, 1634248800, 1634335200, 1634421600, 1634508000,
        1634594400, 1634680800, 1634767200, 1634853600, 1634940000, 1635026400, 1635112800,
        1635199200, 1635285600, 1635372000, 1635458400, 1635544800, 1635717600, 1635804000,
        1635890400, 1635976800, 1636063200, 1636149600, 1636236000, 1636322400, 1636408800,
        1636495200, 1636581600, 1636668000, 1636754400, 1636840800, 1636927200, 1637013600,
        1637100000, 1637186400, 1637272800, 1637359200, 1637445600, 1637532000, 1637618400,
        1637704800, 1637791200, 1637877600, 1637964000, 1638050400, 1638136800, 1638223200,
        1638309600, 1638309600, 1638396000, 1638482400, 1638568800, 1638655200, 1638741600,
        1638828000, 1638914400, 1639000800, 1639087200, 1639173600, 1639260000, 1639346400,
        1639432800, 1639519200, 1639605600, 1639692000, 1639778400, 1639864800, 1639951200,
        1640037600, 1640124000, 1640210400, 1640296800, 1640383200, 1640469600, 1640556000,
        1640642400, 1640728800, 1640815200, 1640988000, 1641074400, 1641160800, 1641247200,
        1641333600, 1641420000, 1641506400, 1641592800, 1641679200, 1641765600, 1641852000,
        1641938400, 1642024800, 1642111200, 1642197600, 1642284000, 1642370400, 1642456800,
        1642543200, 1642629600, 1642716000, 1642802400, 1642888800, 1642975200, 1643061600,
        1643148000, 1643234400, 1643320800, 1643407200, 1643493600, 1643580000, 1643666400,
        1643752800, 1643839200, 1644012000, 1644098400, 1644184800, 1644271200, 1644357600,
        1644444000, 1644530400, 1644616800, 1644703200, 1644789600, 1644876000, 1644962400,
        1645048800, 1645135200, 1645221600, 1645308000, 1645394400, 1645480800, 1645567200,
        1645653600, 1645740000, 1645826400, 1645912800, 1645999200, 1646085600, 1646172000,
        1646258400, 1646085600, 1646172000, 1646258400, 1646344800, 1646431200, 1646517600,
        1646604000, 1646690400, 1646776800, 1646863200, 1646949600, 1647036000, 1647122400,
        1647208800, 1647295200, 1647381600, 1647468000, 1647554400, 1647640800, 1647727200,
        1647813600, 1647900000, 1647986400, 1648072800, 1648159200, 1648245600, 1648332000,
        1648418400, 1648764000, 1648850400, 1648936800, 1649023200
    };

    using map64_t = ap_map_t<uint64_t, int>;
    map64_t &map64 = *(map64_t *)ap_alloc(sizeof(map64_t));
    map64.init(ctx);

    for (auto i : known_bug)
        map64.insert(i, 0);

    DBG("--- sz: %ld", map64.size());
    for (auto &[key, val] : map64)
        DBG("key: %ld, val: %d", key, val);

    ap_free(&map64);

    return 0;
}