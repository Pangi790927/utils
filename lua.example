#include "debug.h"
#include "yaml.h"
#include "tinyexpr.h"
#include <fstream>

#define LUA_IMPL
#include "minilua.h"

int main(int argc, char const *argv[])
{
    std::ifstream file("config.yaml");
    auto config = fkyaml::node::deserialize(file);
    DBG("\n%s", fkyaml::node::serialize(config).c_str());

    lua_State *L = luaL_newstate();
    if (L == NULL) {
        DBG("Failed to init lua");
        return -1;
    }

    luaL_requiref(L, LUA_GNAME, luaopen_base, 1); lua_pop(L, 1);
    luaL_requiref(L, LUA_LOADLIBNAME, luaopen_package, 1); lua_pop(L, 1);
    luaL_requiref(L, LUA_COLIBNAME, luaopen_coroutine, 1); lua_pop(L, 1);
    luaL_requiref(L, LUA_TABLIBNAME, luaopen_table, 1); lua_pop(L, 1);

    /* We don't want lua to access our system */
    // luaL_requiref(L, LUA_IOLIBNAME, luaopen_io, 1); lua_pop(L, 1);
    // luaL_requiref(L, LUA_OSLIBNAME, luaopen_os, 1); lua_pop(L, 1);
    luaL_requiref(L, LUA_STRLIBNAME, luaopen_string, 1); lua_pop(L, 1);
    luaL_requiref(L, LUA_MATHLIBNAME, luaopen_math, 1); lua_pop(L, 1);
    luaL_requiref(L, LUA_UTF8LIBNAME, luaopen_utf8, 1); lua_pop(L, 1);
    luaL_requiref(L, LUA_DBLIBNAME, luaopen_debug, 1); lua_pop(L, 1);
    luaL_loadstring(L, R"___(
        f = io.open('main.cpp')
        print(f:read("*all"))
    )___");
    if (lua_pcall(L, 0, 0, 0) != LUA_OK) {
        DBG("LUA Failed: \n%s", lua_tostring(L, -1));
    }
    lua_close(L);

    return 0;
}
